{% use '../CommonAdmin/security_action.php.twig' %}
{% use '../CommonAdmin/csrf_protection.php.twig' %}
{% block attemptAction %}

    /**
     * This function handles common actions behaviour like
     * checking CSRF protection token or credentials.
     *
     * To customize your action look into:
     * execute{{ action.name|capitalize }}() - holds action logic
     * success{{ action.name|capitalize }}() - called if action was successfull
     * error{{ action.name|capitalize }}()   - called if action errored
     */
    public function attempt{{ action.name|capitalize }}($pk)
    {
        try {
            ${{ builder.ModelClass }} = $this->getObject($pk);

            {{ block('security_action_with_object') -}}

            {%- if action.csrfProtected %}
            if ('POST' == $this->get('request')->getMethod()) {
                {{ block('csrf_action_check_token') }}
            
                $this->execute{{ action.name|capitalize }}(${{ builder.ModelClass }});
            
                return $this->success{{ action.name|capitalize }}(${{ builder.ModelClass }});
            }
            {% else %}            
            $this->execute{{ action.name|capitalize }}(${{ builder.ModelClass }});

            return $this->success{{ action.name|capitalize }}(${{ builder.ModelClass }});
            {%- endif %}
            
        } catch (\Exception $e) {
            return $this->error{{ action.name|capitalize }}(${{ builder.ModelClass }}, $e);
        }

        return $this->render('{{ namespace_prefix }}{{ bundle_name }}:{{ builder.BaseGeneratorName }}Custom:index.html.twig', 
            $this->getAdditionalRenderParameters(${{ builder.ModelClass }}, '{{ action.name }}') + array(
                "{{ builder.ModelClass }}" => ${{ builder.ModelClass }},
                "title" => $this->get('translator')->trans(
                    "{{ action.options.title|default("action.custom.title") }}", 
                    array('%name%' => '{{ action.name }}'), 
                    '{{ action.options.i18n|default('Admingenerator') }}'
                ),
                "actionRoute" => "{{ builder.routePrefixWithSubfolder ~ '_' ~ bundle_name ~ (builder.BaseGeneratorName ? "_" ~ builder.BaseGeneratorName : "") ~ '_custom' }}",
                "actionParams" => array("pk" => $pk, "action" => "{{ action.name }}")
        ));
    }
    
{% endblock %}
    
{% block executeAction %}
    
    /**
     * This function is for you to customize what action actually does
     */
    public function execute{{ action.name|capitalize }}(${{ builder.ModelClass }})
    {
        // By default action does nothing
        // Overwrite this function!
    }
    
{% endblock %}
    
{% block successAction %}
    
    /**
     * This is called when action is successfull
     * Default behavior is redirecting to list with success message
     *
     * @param \{{ model }} ${{ builder.ModelClass }} Your \{{ model }} object
     * @return Response Must return a response!
     */
    public function success{{ action.name|capitalize }}(${{ builder.ModelClass }})
    {
        $this->get('session')->getFlashBag()->add('success', 
            $this->get('translator')->trans(
                "{{ action.options.success|default("action.custom.success") }}", 
                array('%name%' => '{{ action.name }}'), 
                '{{ action.options.i18n|default('Admingenerator') }}'
        ));

        return new RedirectResponse($this->generateUrl("{{ builder.routePrefixWithSubfolder }}_{{ bundle_name }}{{ builder.BaseGeneratorName ? "_" ~ builder.BaseGeneratorName : "" }}_list"));
    }
    
{% endblock %}
    
{% block errorAction %}
    
    /**
     * This is called when action throws an exception
     * Default behavior is redirecting to list with error message
     *
     * @param \{{ model }} ${{ builder.ModelClass }} Your \{{ model }} object
     * @param \Exception $e Exception
     * @return Response Must return a response!
     */
    public function error{{ action.name|capitalize }}(${{ builder.ModelClass }}, $e)
    {
        $this->get('session')->getFlashBag()->add('error', 
            $this->get('translator')->trans(
                "{{ action.options.error|default("action.custom.error") }}", 
                array('%name%' => '{{ action.name }}'), 
                '{{ action.options.i18n|default('Admingenerator') }}'
        ));

        return new RedirectResponse($this->generateUrl("{{ builder.routePrefixWithSubfolder }}_{{ bundle_name }}{{ builder.BaseGeneratorName ? "_" ~ builder.BaseGeneratorName : "" }}_list"));
    }
    
{% endblock %}