{% block type %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\Form\Base{{ builder.BaseGeneratorName }}Type;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Security\Core\SecurityContextInterface; 
use JMS\SecurityExtraBundle\Security\Authorization\Expression\Expression;

class {{ builder.YamlKey|ucfirst }}Type extends AbstractType
{
    protected $securityContext;
    
    /**
     * Form's top level object. Can be used to customize some form type options,
     * e.g. narrow down choices list in query_builder based on some value.
     */
    protected $object;
    
    public function __construct(SecurityContextInterface $securityContext, $object)
    {
        $this->securityContext = $securityContext;
        $this->object = $object;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        // Required to pass $securityContext and $object to embed forms and closures
        $securityContext = $this->securityContext;
        $object = $this->object;
        
        {% for column in builder.columns %}
        {%- if column.credentials -%}
        if (false !== $this->securityContext->isGranted(array(new Expression('{{ column.credentials }}')), $builder->getData())) {
        {%- endif %}

          {% set columnType = column.formType|as_php|convert_as_form('form_widget') %}
          {% set columnOptions = column.formOptions %}
              {% if column.label is defined %}{% set columnOptions = columnOptions|merge({'label': column.label}) %}{% endif %}
              {% if column.help is defined %}{% set columnOptions = columnOptions|merge({'help': column.help}) %}{% endif %}
              {% set columnOptions = columnOptions|merge({'translation_domain': i18n_catalog|default('Admin')}) %}
              {% if column.dbType is sameas('boolean') and builder.BaseGeneratorName is sameas('Filter') %}
                  {% set columnOptions = columnOptions|merge({'translation_domain': 'Admingenerator'}) %}
              {% endif %}
          {% set columnOptions = columnOptions|as_php|convert_as_form(column.formType) %}

           $formOptions = $this->getFormOption('{{ column.name }}', {{ columnOptions }});
           $builder->add('{{ column.name }}', {{ columnType }}, $formOptions);

        {% if column.credentials %}
        }

        {%- endif -%}
        {%- endfor %}

    }

    protected function getFormOption($name, array $formOptions)
    {
        return $formOptions;
    }

    public function getName()
    {
        return '{{ builder.YamlKey }}_{{ builder.ModelClass|lower }}';
    }

}
{% endblock %}
